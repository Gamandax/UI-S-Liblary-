
Action: bulk_file_creator ["/app/frontend/src/App.js"] ['import React, { useState, useEffect } from "react";\nimport "./App.css";\nimport { Copy, Check, Terminal, Zap, Code, Book, Settings, Download, Eye, Palette } from "lucide-react";\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\n\n// Complete Roblox UI Library Lua Code\nconst luaLibraryCode = `-- ╔═══════════════════════════════════════════════════════════════╗\n-- ║                     ROBLOX UI LIBRARY V2.0                     ║\n-- ║                  Modern Executor UI Module                     ║\n-- ║                Created by Script Loader Team                   ║\n-- ╚═══════════════════════════════════════════════════════════════╝\n\nlocal UILibrary = {}\nUILibrary.__index = UILibrary\n\n-- Services\nlocal TweenService = game:GetService("TweenService")\nlocal UserInputService = game:GetService("UserInputService")\nlocal RunService = game:GetService("RunService")\nlocal Players = game:GetService("Players")\nlocal CoreGui = game:GetService("CoreGui")\n\n-- Variables\nlocal Player = Players.LocalPlayer\nlocal Mouse = Player:GetMouse()\n\n-- Default Theme\nlocal DefaultTheme = {\n    MainColor = Color3.fromRGB(25, 25, 35),\n    AccentColor = Color3.fromRGB(0, 162, 255),\n    BackgroundColor = Color3.fromRGB(15, 15, 20),\n    TextColor = Color3.fromRGB(255, 255, 255),\n    SecondaryTextColor = Color3.fromRGB(200, 200, 200),\n    ElementColor = Color3.fromRGB(35, 35, 45),\n    HoverColor = Color3.fromRGB(45, 45, 55),\n    BorderColor = Color3.fromRGB(60, 60, 70)\n}\n\n-- Utility Functions\nlocal function CreateTween(object, properties, duration, easingStyle, easingDirection)\n    local tweenInfo = TweenInfo.new(\n        duration or 0.3,\n        easingStyle or Enum.EasingStyle.Quad,\n        easingDirection or Enum.EasingDirection.Out\n    )\n    return TweenService:Create(object, tweenInfo, properties)\nend\n\nlocal function CreateRipple(button, x, y)\n    local ripple = Instance.new("Frame")\n    ripple.Name = "Ripple"\n    ripple.Size = UDim2.new(0, 0, 0, 0)\n    ripple.Position = UDim2.new(0, x, 0, y)\n    ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)\n    ripple.BackgroundTransparency = 0.8\n    ripple.BorderSizePixel = 0\n    ripple.ClipsDescendants = true\n    \n    local corner = Instance.new("UICorner")\n    corner.CornerRadius = UDim.new(1, 0)\n    corner.Parent = ripple\n    \n    ripple.Parent = button\n    \n    local size = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2\n    local tween = CreateTween(ripple, {\n        Size = UDim2.new(0, size, 0, size),\n        Position = UDim2.new(0, x - size/2, 0, y - size/2),\n        BackgroundTransparency = 1\n    }, 0.5)\n    \n    tween:Play()\n    tween.Completed:Connect(function()\n        ripple:Destroy()\n    end)\nend\n\n-- Main Library Constructor\nfunction UILibrary.new(options)\n    local self = setmetatable({}, UILibrary)\n    \n    options = options or {}\n    self.Title = options.Title or "UI Library"\n    self.Theme = options.Theme or DefaultTheme\n    self.Size = options.Size or UDim2.new(0, 600, 0, 450)\n    self.Position = options.Position or UDim2.new(0.5, -300, 0.5, -225)\n    \n    -- Create Main GUI\n    self:CreateMainGUI()\n    \n    return self\nend\n\nfunction UILibrary:CreateMainGUI()\n    -- Main ScreenGui\n    self.ScreenGui = Instance.new("ScreenGui")\n    self.ScreenGui.Name = "UILibrary"\n    self.ScreenGui.Parent = CoreGui\n    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling\n    \n    -- Main Frame\n    self.MainFrame = Instance.new("Frame")\n    self.MainFrame.Name = "MainFrame"\n    self.MainFrame.Size = self.Size\n    self.MainFrame.Position = self.Position\n    self.MainFrame.BackgroundColor3 = self.Theme.MainColor\n    self.MainFrame.BorderSizePixel = 0\n    self.MainFrame.ClipsDescendants = true\n    self.MainFrame.Parent = self.ScreenGui\n    \n    -- Corner Radius\n    local mainCorner = Instance.new("UICorner")\n    mainCorner.CornerRadius = UDim.new(0, 12)\n    mainCorner.Parent = self.MainFrame\n    \n    -- Drop Shadow\n    local shadow = Instance.new("ImageLabel")\n    shadow.Name = "Shadow"\n    shadow.Size = UDim2.new(1, 30, 1, 30)\n    shadow.Position = UDim2.new(0, -15, 0, -15)\n    shadow.BackgroundTransparency = 1\n    shadow.Image = "rbxasset://textures/ui/Controls/DropShadow.png"\n    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)\n    shadow.ImageTransparency = 0.7\n    shadow.ScaleType = Enum.ScaleType.Slice\n    shadow.SliceCenter = Rect.new(12, 12, 256-12, 256-12)\n    shadow.ZIndex = -1\n    shadow.Parent = self.MainFrame\n    \n    -- Title Bar\n    self.TitleBar = Instance.new("Frame")\n    self.TitleBar.Name = "TitleBar"\n    self.TitleBar.Size = UDim2.new(1, 0, 0, 40)\n    self.TitleBar.Position = UDim2.new(0, 0, 0, 0)\n    self.TitleBar.BackgroundColor3 = self.Theme.AccentColor\n    self.TitleBar.BorderSizePixel = 0\n    self.TitleBar.Parent = self.MainFrame\n    \n    local titleCorner = Instance.new("UICorner")\n    titleCorner.CornerRadius = UDim.new(0, 12)\n    titleCorner.Parent = self.TitleBar\n    \n    -- Title Text\n    self.TitleLabel = Instance.new("TextLabel")\n    self.TitleLabel.Name = "TitleLabel"\n    self.TitleLabel.Size = UDim2.new(1, -100, 1, 0)\n    self.TitleLabel.Position = UDim2.new(0, 15, 0, 0)\n    self.TitleLabel.BackgroundTransparency = 1\n    self.TitleLabel.Text = self.Title\n    self.TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)\n    self.TitleLabel.TextSize = 16\n    self.TitleLabel.Font = Enum.Font.GothamBold\n    self.TitleLabel.TextXAlignment = Enum.TextXAlignment.Left\n    self.TitleLabel.Parent = self.TitleBar\n    \n    -- Close Button\n    self.CloseButton = Instance.new("TextButton")\n    self.CloseButton.Name = "CloseButton"\n    self.CloseButton.Size = UDim2.new(0, 30, 0, 30)\n    self.CloseButton.Position = UDim2.new(1, -35, 0, 5)\n    self.CloseButton.BackgroundColor3 = Color3.fromRGB(255, 75, 75)\n    self.CloseButton.BorderSizePixel = 0\n    self.CloseButton.Text = "×"\n    self.CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)\n    self.CloseButton.TextSize = 18\n    self.CloseButton.Font = Enum.Font.GothamBold\n    self.CloseButton.Parent = self.TitleBar\n    \n    local closeCorner = Instance.new("UICorner")\n    closeCorner.CornerRadius = UDim.new(0, 6)\n    closeCorner.Parent = self.CloseButton\n    \n    -- Content Frame\n    self.ContentFrame = Instance.new("ScrollingFrame")\n    self.ContentFrame.Name = "ContentFrame"\n    self.ContentFrame.Size = UDim2.new(1, 0, 1, -40)\n    self.ContentFrame.Position = UDim2.new(0, 0, 0, 40)\n    self.ContentFrame.BackgroundColor3 = self.Theme.BackgroundColor\n    self.ContentFrame.BorderSizePixel = 0\n    self.ContentFrame.ScrollBarThickness = 4\n    self.ContentFrame.ScrollBarImageColor3 = self.Theme.AccentColor\n    self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)\n    self.ContentFrame.Parent = self.MainFrame\n    \n    -- Layout\n    self.Layout = Instance.new("UIListLayout")\n    self.Layout.SortOrder = Enum.SortOrder.LayoutOrder\n    self.Layout.Padding = UDim.new(0, 8)\n    self.Layout.Parent = self.ContentFrame\n    \n    -- Padding\n    local padding = Instance.new("UIPadding")\n    padding.PaddingTop = UDim.new(0, 15)\n    padding.PaddingBottom = UDim.new(0, 15)\n    padding.PaddingLeft = UDim.new(0, 15)\n    padding.PaddingRight = UDim.new(0, 15)\n    padding.Parent = self.ContentFrame\n    \n    -- Make draggable\n    self:MakeDraggable()\n    \n    -- Close functionality\n    self.CloseButton.Activated:Connect(function()\n        self:Hide()\n    end)\n    \n    -- Update canvas size\n    self.Layout.Changed:Connect(function()\n        self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, self.Layout.AbsoluteContentSize.Y + 30)\n    end)\nend\n\nfunction UILibrary:MakeDraggable()\n    local dragging = false\n    local dragInput, mousePos, framePos\n    \n    self.TitleBar.InputBegan:Connect(function(input)\n        if input.UserInputType == Enum.UserInputType.MouseButton1 then\n            dragging = true\n            mousePos = input.Position\n            framePos = self.MainFrame.Position\n            \n            input.Changed:Connect(function()\n                if input.UserInputState == Enum.UserInputState.End then\n                    dragging = false\n                end\n            end)\n        end\n    end)\n    \n    UserInputService.InputChanged:Connect(function(input)\n        if input.UserInputType == Enum.UserInputType.MouseMovement then\n            dragInput = input\n        end\n    end)\n    \n    UserInputService.InputChanged:Connect(function(input)\n        if input == dragInput and dragging then\n            local delta = input.Position - mousePos\n            local newPos = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)\n            CreateTween(self.MainFrame, {Position = newPos}, 0.1):Play()\n        end\n    end)\nend\n\n-- Create Button\nfunction UILibrary:CreateButton(options)\n    options = options or {}\n    local text = options.Text or "Button"\n    local callback = options.Callback or function() end\n    \n    local buttonFrame = Instance.new("Frame")\n    buttonFrame.Name = "ButtonFrame"\n    buttonFrame.Size = UDim2.new(1, 0, 0, 35)\n    buttonFrame.BackgroundTransparency = 1\n    buttonFrame.Parent = self.ContentFrame\n    \n    local button = Instance.new("TextButton")\n    button.Name = "Button"\n    button.Size = UDim2.new(1, 0, 1, 0)\n    button.BackgroundColor3 = self.Theme.ElementColor\n    button.BorderSizePixel = 0\n    button.Text = text\n    button.TextColor3 = self.Theme.TextColor\n    button.TextSize = 14\n    button.Font = Enum.Font.Gotham\n    button.ClipsDescendants = true\n    button.Parent = buttonFrame\n    \n    local buttonCorner = Instance.new("UICorner")\n    buttonCorner.CornerRadius = UDim.new(0, 8)\n    buttonCorner.Parent = button\n    \n    -- Hover effect\n    button.MouseEnter:Connect(function()\n        CreateTween(button, {BackgroundColor3 = self.Theme.HoverColor}):Play()\n    end)\n    \n    button.MouseLeave:Connect(function()\n        CreateTween(button, {BackgroundColor3 = self.Theme.ElementColor}):Play()\n    end)\n    \n    -- Click effect\n    button.Activated:Connect(function()\n        local pos = button.AbsolutePosition\n        local x = Mouse.X - pos.X\n        local y = Mouse.Y - pos.Y\n        CreateRipple(button, x, y)\n        callback()\n    end)\n    \n    return button\nend\n\n-- Create Toggle\nfunction UILibrary:CreateToggle(options)\n    options = options or {}\n    local text = options.Text or "Toggle"\n    local default = options.Default or false\n    local callback = options.Callback or function() end\n    \n    local toggleFrame = Instance.new("Frame")\n    toggleFrame.Name = "ToggleFrame"\n    toggleFrame.Size = UDim2.new(1, 0, 0, 35)\n    toggleFrame.BackgroundColor3 = self.Theme.ElementColor\n    toggleFrame.BorderSizePixel = 0\n    toggleFrame.Parent = self.ContentFrame\n    \n    local toggleCorner = Instance.new("UICorner")\n    toggleCorner.CornerRadius = UDim.new(0, 8)\n    toggleCorner.Parent = toggleFrame\n    \n    local label = Instance.new("TextLabel")\n    label.Name = "Label"\n    label.Size = UDim2.new(1, -60, 1, 0)\n    label.Position = UDim2.new(0, 15, 0, 0)\n    label.BackgroundTransparency = 1\n    label.Text = text\n    label.TextColor3 = self.Theme.TextColor\n    label.TextSize = 14\n    label.Font = Enum.Font.Gotham\n    label.TextXAlignment = Enum.TextXAlignment.Left\n    label.Parent = toggleFrame\n    \n    local toggleButton = Instance.new("TextButton")\n    toggleButton.Name = "ToggleButton"\n    toggleButton.Size = UDim2.new(0, 40, 0, 20)\n    toggleButton.Position = UDim2.new(1, -50, 0.5, -10)\n    toggleButton.BackgroundColor3 = default and self.Theme.AccentColor or self.Theme.BorderColor\n    toggleButton.BorderSizePixel = 0\n    toggleButton.Text = ""\n    toggleButton.Parent = toggleFrame\n    \n    local toggleButtonCorner = Instance.new("UICorner")\n    toggleButtonCorner.CornerRadius = UDim.new(1, 0)\n    toggleButtonCorner.Parent = toggleButton\n    \n    local toggleCircle = Instance.new("Frame")\n    toggleCircle.Name = "Circle"\n    toggleCircle.Size = UDim2.new(0, 16, 0, 16)\n    toggleCircle.Position = default and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)\n    toggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)\n    toggleCircle.BorderSizePixel = 0\n    toggleCircle.Parent = toggleButton\n    \n    local circleCorner = Instance.new("UICorner")\n    circleCorner.CornerRadius = UDim.new(1, 0)\n    circleCorner.Parent = toggleCircle\n    \n    local toggled = default\n    \n    toggleButton.Activated:Connect(function()\n        toggled = not toggled\n        \n        local buttonColor = toggled and self.Theme.AccentColor or self.Theme.BorderColor\n        local circlePos = toggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)\n        \n        CreateTween(toggleButton, {BackgroundColor3 = buttonColor}):Play()\n        CreateTween(toggleCircle, {Position = circlePos}):Play()\n        \n        callback(toggled)\n    end)\n    \n    return {Frame = toggleFrame, Value = toggled}\nend\n\n-- Create TextBox\nfunction UILibrary:CreateTextBox(options)\n    options = options or {}\n    local text = options.Text or "TextBox"\n    local placeholder = options.Placeholder or "Enter text..."\n    local callback = options.Callback or function() end\n    \n    local textBoxFrame = Instance.new("Frame")\n    textBoxFrame.Name = "TextBoxFrame"\n    textBoxFrame.Size = UDim2.new(1, 0, 0, 35)\n    textBoxFrame.BackgroundTransparency = 1\n    textBoxFrame.Parent = self.ContentFrame\n    \n    local label = Instance.new("TextLabel")\n    label.Name = "Label"\n    label.Size = UDim2.new(1, 0, 0, 20)\n    label.Position = UDim2.new(0, 0, 0, 0)\n    label.BackgroundTransparency = 1\n    label.Text = text\n    label.TextColor3 = self.Theme.TextColor\n    label.TextSize = 12\n    label.Font = Enum.Font.Gotham\n    label.TextXAlignment = Enum.TextXAlignment.Left\n    label.Parent = textBoxFrame\n    \n    local textBox = Instance.new("TextBox")\n    textBox.Name = "TextBox"\n    textBox.Size = UDim2.new(1, 0, 0, 25)\n    textBox.Position = UDim2.new(0, 0, 0, 20)\n    textBox.BackgroundColor3 = self.Theme.ElementColor\n    textBox.BorderSizePixel = 0\n    textBox.Text = ""\n    textBox.PlaceholderText = placeholder\n    textBox.TextColor3 = self.Theme.TextColor\n    textBox.PlaceholderColor3 = self.Theme.SecondaryTextColor\n    textBox.TextSize = 14\n    textBox.Font = Enum.Font.Gotham\n    textBox.Parent = textBoxFrame\n    \n    local textBoxCorner = Instance.new("UICorner")\n    textBoxCorner.CornerRadius = UDim.new(0, 4)\n    textBoxCorner.Parent = textBox\n    \n    textBox.FocusLost:Connect(function()\n        callback(textBox.Text)\n    end)\n    \n    textBoxFrame.Size = UDim2.new(1, 0, 0, 50)\n    \n    return textBox\nend\n\n-- Create Dropdown\nfunction UILibrary:CreateDropdown(options)\n    options = options or {}\n    local text = options.Text or "Dropdown"\n    local items = options.Items or {"Item 1", "Item 2", "Item 3"}\n    local callback = options.Callback or function() end\n    \n    local dropdownFrame = Instance.new("Frame")\n    dropdownFrame.Name = "DropdownFrame"\n    dropdownFrame.Size = UDim2.new(1, 0, 0, 35)\n    dropdownFrame.BackgroundTransparency = 1\n    dropdownFrame.Parent = self.ContentFrame\n    \n    local dropdown = Instance.new("TextButton")\n    dropdown.Name = "Dropdown"\n    dropdown.Size = UDim2.new(1, 0, 1, 0)\n    dropdown.BackgroundColor3 = self.Theme.ElementColor\n    dropdown.BorderSizePixel = 0\n    dropdown.Text = text .. ": " .. items[1]\n    dropdown.TextColor3 = self.Theme.TextColor\n    dropdown.TextSize = 14\n    dropdown.Font = Enum.Font.Gotham\n    dropdown.TextXAlignment = Enum.TextXAlignment.Left\n    dropdown.Parent = dropdownFrame\n    \n    local dropdownCorner = Instance.new("UICorner")\n    dropdownCorner.CornerRadius = UDim.new(0, 8)\n    dropdownCorner.Parent = dropdown\n    \n    local padding = Instance.new("UIPadding")\n    padding.PaddingLeft = UDim.new(0, 15)\n    padding.Parent = dropdown\n    \n    local arrow = Instance.new("TextLabel")\n    arrow.Name = "Arrow"\n    arrow.Size = UDim2.new(0, 20, 1, 0)\n    arrow.Position = UDim2.new(1, -25, 0, 0)\n    arrow.BackgroundTransparency = 1\n    arrow.Text = "▼"\n    arrow.TextColor3 = self.Theme.AccentColor\n    arrow.TextSize = 12\n    arrow.Font = Enum.Font.Gotham\n    arrow.Parent = dropdown\n    \n    local dropdownList = Instance.new("Frame")\n    dropdownList.Name = "DropdownList"\n    dropdownList.Size = UDim2.new(1, 0, 0, #items * 30)\n    dropdownList.Position = UDim2.new(0, 0, 1, 5)\n    dropdownList.BackgroundColor3 = self.Theme.MainColor\n    dropdownList.BorderSizePixel = 0\n    dropdownList.Visible = false\n    dropdownList.ZIndex = 10\n    dropdownList.Parent = dropdownFrame\n    \n    local listCorner = Instance.new("UICorner")\n    listCorner.CornerRadius = UDim.new(0, 8)\n    listCorner.Parent = dropdownList\n    \n    local listLayout = Instance.new("UIListLayout")\n    listLayout.SortOrder = Enum.SortOrder.LayoutOrder\n    listLayout.Parent = dropdownList\n    \n    local isOpen = false\n    local selectedItem = items[1]\n    \n    for i, item in ipairs(items) do\n        local itemButton = Instance.new("TextButton")\n        itemButton.Name = "Item" .. i\n        itemButton.Size = UDim2.new(1, 0, 0, 30)\n        itemButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0, 0)\n        itemButton.BorderSizePixel = 0\n        itemButton.Text = item\n        itemButton.TextColor3 = self.Theme.TextColor\n        itemButton.TextSize = 14\n        itemButton.Font = Enum.Font.Gotham\n        itemButton.TextXAlignment = Enum.TextXAlignment.Left\n        itemButton.Parent = dropdownList\n        \n        local itemPadding = Instance.new("UIPadding")\n        itemPadding.PaddingLeft = UDim.new(0, 15)\n        itemPadding.Parent = itemButton\n        \n        itemButton.MouseEnter:Connect(function()\n            CreateTween(itemButton, {BackgroundColor3 = self.Theme.HoverColor}):Play()\n        end)\n        \n        itemButton.MouseLeave:Connect(function()\n            CreateTween(itemButton, {BackgroundColor3 = Color3.fromRGB(0, 0, 0, 0)}):Play()\n        end)\n        \n        itemButton.Activated:Connect(function()\n            selectedItem = item\n            dropdown.Text = text .. ": " .. item\n            dropdownList.Visible = false\n            isOpen = false\n            CreateTween(arrow, {Rotation = 0}):Play()\n            callback(item)\n        end)\n    end\n    \n    dropdown.Activated:Connect(function()\n        isOpen = not isOpen\n        dropdownList.Visible = isOpen\n        CreateTween(arrow, {Rotation = isOpen and 180 or 0}):Play()\n    end)\n    \n    return {Frame = dropdownFrame, Value = selectedItem}\nend\n\n-- Create Slider\nfunction UILibrary:CreateSlider(options)\n    options = options or {}\n    local text = options.Text or "Slider"\n    local min = options.Min or 0\n    local max = options.Max or 100\n    local default = options.Default or min\n    local callback = options.Callback or function() end\n    \n    local sliderFrame = Instance.new("Frame")\n    sliderFrame.Name = "SliderFrame"\n    sliderFrame.Size = UDim2.new(1, 0, 0, 50)\n    sliderFrame.BackgroundTransparency = 1\n    sliderFrame.Parent = self.ContentFrame\n    \n    local label = Instance.new("TextLabel")\n    label.Name = "Label"\n    label.Size = UDim2.new(0.7, 0, 0, 20)\n    label.Position = UDim2.new(0, 0, 0, 0)\n    label.BackgroundTransparency = 1\n    label.Text = text\n    label.TextColor3 = self.Theme.TextColor\n    label.TextSize = 14\n    label.Font = Enum.Font.Gotham\n    label.TextXAlignment = Enum.TextXAlignment.Left\n    label.Parent = sliderFrame\n    \n    local valueLabel = Instance.new("TextLabel")\n    valueLabel.Name = "ValueLabel"\n    valueLabel.Size = UDim2.new(0.3, 0, 0, 20)\n    valueLabel.Position = UDim2.new(0.7, 0, 0, 0)\n    valueLabel.BackgroundTransparency = 1\n    valueLabel.Text = tostring(default)\n    valueLabel.TextColor3 = self.Theme.AccentColor\n    valueLabel.TextSize = 14\n    valueLabel.Font = Enum.Font.GothamBold\n    valueLabel.TextXAlignment = Enum.TextXAlignment.Right\n    valueLabel.Parent = sliderFrame\n    \n    local sliderTrack = Instance.new("Frame")\n    sliderTrack.Name = "SliderTrack"\n    sliderTrack.Size = UDim2.new(1, 0, 0, 8)\n    sliderTrack.Position = UDim2.new(0, 0, 0, 30)\n    sliderTrack.BackgroundColor3 = self.Theme.BorderColor\n    sliderTrack.BorderSizePixel = 0\n    sliderTrack.Parent = sliderFrame\n    \n    local trackCorner = Instance.new("UICorner")\n    trackCorner.CornerRadius = UDim.new(1, 0)\n    trackCorner.Parent = sliderTrack\n    \n    local sliderFill = Instance.new("Frame")\n    sliderFill.Name = "SliderFill"\n    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)\n    sliderFill.Position = UDim2.new(0, 0, 0, 0)\n    sliderFill.BackgroundColor3 = self.Theme.AccentColor\n    sliderFill.BorderSizePixel = 0\n    sliderFill.Parent = sliderTrack\n    \n    local fillCorner = Instance.new("UICorner")\n    fillCorner.CornerRadius = UDim.new(1, 0)\n    fillCorner.Parent = sliderFill\n    \n    local sliderKnob = Instance.new("Frame")\n    sliderKnob.Name = "SliderKnob"\n    sliderKnob.Size = UDim2.new(0, 16, 0, 16)\n    sliderKnob.Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8)\n    sliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)\n    sliderKnob.BorderSizePixel = 0\n    sliderKnob.Parent = sliderTrack\n    \n    local knobCorner = Instance.new("UICorner")\n    knobCorner.CornerRadius = UDim.new(1, 0)\n    knobCorner.Parent = sliderKnob\n    \n    local currentValue = default\n    local dragging = false\n    \n    local function updateSlider(value)\n        value = math.clamp(value, min, max)\n        currentValue = value\n        valueLabel.Text = tostring(math.floor(value))\n        \n        local percentage = (value - min) / (max - min)\n        CreateTween(sliderFill, {Size = UDim2.new(percentage, 0, 1, 0)}):Play()\n        CreateTween(sliderKnob, {Position = UDim2.new(percentage, -8, 0.5, -8)}):Play()\n        \n        callback(value)\n    end\n    \n    sliderTrack.InputBegan:Connect(function(input)\n        if input.UserInputType == Enum.UserInputType.MouseButton1 then\n            dragging = true\n            local percentage = (Mouse.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X\n            local value = min + (max - min) * percentage\n            updateSlider(value)\n        end\n    end)\n    \n    UserInputService.InputChanged:Connect(function(input)\n        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then\n            local percentage = (Mouse.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X\n            local value = min + (max - min) * percentage\n            updateSlider(value)\n        end\n    end)\n    \n    UserInputService.InputEnded:Connect(function(input)\n        if input.UserInputType == Enum.UserInputType.MouseButton1 then\n            dragging = false\n        end\n    end)\n    \n    return {Frame = sliderFrame, Value = currentValue, UpdateValue = updateSlider}\nend\n\n-- Create Notification\nfunction UILibrary:CreateNotification(options)\n    options = options or {}\n    local title = options.Title or "Notification"\n    local text = options.Text or "This is a notification"\n    local duration = options.Duration or 3\n    local type = options.Type or "info" -- info, success, warning, error\n    \n    local colors = {\n        info = self.Theme.AccentColor,\n        success = Color3.fromRGB(75, 181, 67),\n        warning = Color3.fromRGB(255, 193, 7),\n        error = Color3.fromRGB(220, 53, 69)\n    }\n    \n    local notificationGui = Instance.new("ScreenGui")\n    notificationGui.Name = "NotificationGui"\n    notificationGui.Parent = CoreGui\n    \n    local notification = Instance.new("Frame")\n    notification.Name = "Notification"\n    notification.Size = UDim2.new(0, 300, 0, 80)\n    notification.Position = UDim2.new(1, 320, 0, 50)\n    notification.BackgroundColor3 = self.Theme.MainColor\n    notification.BorderSizePixel = 0\n    notification.Parent = notificationGui\n    \n    local notifCorner = Instance.new("UICorner")\n    notifCorner.CornerRadius = UDim.new(0, 8)\n    notifCorner.Parent = notification\n    \n    local colorBar = Instance.new("Frame")\n    colorBar.Name = "ColorBar"\n    colorBar.Size = UDim2.new(0, 4, 1, 0)\n    colorBar.Position = UDim2.new(0, 0, 0, 0)\n    colorBar.BackgroundColor3 = colors[type]\n    colorBar.BorderSizePixel = 0\n    colorBar.Parent = notification\n    \n    local barCorner = Instance.new("UICorner")\n    barCorner.CornerRadius = UDim.new(0, 2)\n    barCorner.Parent = colorBar\n    \n    local titleLabel = Instance.new("TextLabel")\n    titleLabel.Name = "TitleLabel"\n    titleLabel.Size = UDim2.new(1, -20, 0, 25)\n    titleLabel.Position = UDim2.new(0, 15, 0, 10)\n    titleLabel.BackgroundTransparency = 1\n    titleLabel.Text = title\n    titleLabel.TextColor3 = self.Theme.TextColor\n    titleLabel.TextSize = 16\n    titleLabel.Font = Enum.Font.GothamBold\n    titleLabel.TextXAlignment = Enum.TextXAlignment.Left\n    titleLabel.Parent = notification\n    \n    local textLabel = Instance.new("TextLabel")\n    textLabel.Name = "TextLabel"\n    textLabel.Size = UDim2.new(1, -20, 0, 35)\n    textLabel.Position = UDim2.new(0, 15, 0, 35)\n    textLabel.BackgroundTransparency = 1\n    textLabel.Text = text\n    textLabel.TextColor3 = self.Theme.SecondaryTextColor\n    textLabel.TextSize = 14\n    textLabel.Font = Enum.Font.Gotham\n    textLabel.TextXAlignment = Enum.TextXAlignment.Left\n    textLabel.TextWrapped = true\n    textLabel.Parent = notification\n    \n    -- Slide in animation\n    CreateTween(notification, {Position = UDim2.new(1, -320, 0, 50)}, 0.5, Enum.EasingStyle.Back):Play()\n    \n    -- Auto dismiss\n    wait(duration)\n    CreateTween(notification, {Position = UDim2.new(1, 320, 0, 50)}, 0.3):Play()\n    wait(0.3)\n    notificationGui:Destroy()\nend\n\n-- Show/Hide Methods\nfunction UILibrary:Show()\n    self.ScreenGui.Enabled = true\n    self.MainFrame.Size = UDim2.new(0, 0, 0, 0)\n    CreateTween(self.MainFrame, {Size = self.Size}, 0.3, Enum.EasingStyle.Back):Play()\nend\n\nfunction UILibrary:Hide()\n    CreateTween(self.MainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3):Play()\n    wait(0.3)\n    self.ScreenGui:Destroy()\nend\n\n-- Return the library\nreturn UILibrary\n\n--[[\nUSAGE EXAMPLE:\n\n-- Load the library\nlocal UILibrary = loadstring(game:HttpGet("YOUR_SCRIPT_URL"))()\n\n-- Create a new window\nlocal Window = UILibrary.new({\n    Title = "My Script Hub",\n    Size = UDim2.new(0, 500, 0, 400)\n})\n\n-- Create elements\nWindow:CreateButton({\n    Text = "Click Me!",\n    Callback = function()\n        print("Button clicked!")\n    end\n})\n\nWindow:CreateToggle({\n    Text = "Enable Feature",\n    Default = false,\n    Callback = function(value)\n        print("Toggle:", value)\n    end\n})\n\nWindow:CreateTextBox({\n    Text = "Username",\n    Placeholder = "Enter your username",\n    Callback = function(text)\n        print("Text:", text)\n    end\n})\n\nWindow:CreateDropdown({\n    Text = "Select Mode",\n    Items = {"Mode 1", "Mode 2", "Mode 3"},\n    Callback = function(item)\n        print("Selected:", item)\n    end\n})\n\nWindow:CreateSlider({\n    Text = "Speed",\n    Min = 1,\n    Max = 100,\n    Default = 50,\n    Callback = function(value)\n        print("Slider:", value)\n    end\n})\n\n-- Show notification\nWindow:CreateNotification({\n    Title = "Success!",\n    Text = "Script loaded successfully",\n    Type = "success",\n    Duration = 3\n})\n\n-- Show the window\nWindow:Show()\n]]`;\n\nfunction App() {\n  const [copied, setCopied] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState(\'overview\');\n  const [selectedTheme, setSelectedTheme] = useState(\'dark\');\n\n  useEffect(() => {\n    const timer = setTimeout(() => setLoading(false), 2000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(luaLibraryCode);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 3000);\n    } catch (err) {\n      console.error(\'Failed to copy: \', err);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className="min-h-screen bg-black flex items-center justify-center">\n        <div className="text-center">\n          <div className="animate-pulse mb-6">\n            <Code className="w-20 h-20 text-cyan-400 mx-auto mb-4" />\n          </div>\n          <div className="text-cyan-400 text-2xl font-mono mb-4">Loading UI Library...</div>\n          <div className="text-gray-400 text-lg font-mono mb-6">Compiling Lua modules</div>\n          <div className="flex justify-center space-x-2">\n            <div className="w-3 h-3 bg-cyan-400 rounded-full animate-bounce"></div>\n            <div className="w-3 h-3 bg-cyan-400 rounded-full animate-bounce" style={{animationDelay: \'0.2s\'}}></div>\n            <div className="w-3 h-3 bg-cyan-400 rounded-full animate-bounce" style={{animationDelay: \'0.4s\'}}></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-black text-white">\n      {/* Animated background */}\n      <div className="absolute inset-0">\n        <div className="absolute top-20 left-20 w-64 h-64 bg-cyan-500/5 rounded-full blur-3xl animate-pulse"></div>\n        <div className="absolute bottom-20 right-20 w-96 h-96 bg-purple-500/5 rounded-full blur-3xl animate-pulse" style={{animationDelay: \'1s\'}}></div>\n        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-72 h-72 bg-blue-500/3 rounded-full blur-3xl animate-pulse" style={{animationDelay: \'2s\'}}></div>\n      </div>\n\n      {/* Header */}\n      <div className="relative z-10 border-b border-gray-800/50 backdrop-blur-xl">\n        <div className="container mx-auto px-6 py-6">\n          <div className="flex items-center justify-between">\n            <div className="flex items-center space-x-4">\n              <div className="flex items-center space-x-3">\n                <Code className="w-8 h-8 text-cyan-400" />\n                <div>\n                  <h1 className="text-2xl font-bold bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent">\n                    Roblox UI Library\n                  </h1>\n                  <p className="text-gray-400 text-sm">Modern Executor Module v2.0</p>\n                </div>\n              </div>\n            </div>\n            <div className="flex items-center space-x-4">\n              <div className="px-3 py-1 bg-green-500/20 border border-green-500/30 rounded-full text-green-400 text-sm font-mono">\n                Ready\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className="relative z-10 border-b border-gray-800/30">\n        <div className="container mx-auto px-6">\n          <div className="flex space-x-8">\n            {[\n              { id: \'overview\', label: \'Overview\', icon: Eye },\n              { id: \'elements\', label: \'UI Elements\', icon: Settings },\n              { id: \'code\', label: \'Full Code\', icon: Code },\n              { id: \'docs\', label: \'Documentation\', icon: Book }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`flex items-center space-x-2 px-4 py-4 border-b-2 transition-all duration-200 ${\n                  activeTab === tab.id\n                    ? \'border-cyan-400 text-cyan-400\'\n                    : \'border-transparent text-gray-400 hover:text-white hover:border-gray-600\'\n                }`}\n              >\n                <tab.icon className="w-4 h-4" />\n                <span className="font-medium">{tab.label}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className="relative z-10 container mx-auto px-6 py-8">\n        {/* Overview Tab */}\n        {activeTab === \'overview\' && (\n          <div className="space-y-8 animate-fade-in">\n            {/* Hero Section */}\n            <div className="text-center space-y-4">\n              <h2 className="text-4xl font-bold bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent">\n                Complete Roblox UI Library\n              </h2>\n              <p className="text-xl text-gray-300 max-w-3xl mx-auto">\n                A comprehensive, modern UI library for Roblox executors with all the essential elements you need\n              </p>\n            </div>\n\n            {/* Features Grid */}\n            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">\n              {[\n                { name: \'Button\', desc: \'Interactive buttons with ripple effects\', icon: \'🔘\' },\n                { name: \'Toggle\', desc: \'Smooth animated toggle switches\', icon: \'🔄\' },\n                { name: \'TextBox\', desc: \'Input fields with validation\', icon: \'📝\' },\n                { name: \'Dropdown\', desc: \'Expandable selection menus\', icon: \'📋\' },\n                { name: \'Slider\', desc: \'Value adjustment with smooth dragging\', icon: \'🎚️\' },\n                { name: \'Notification\', desc: \'Toast notifications with animations\', icon: \'🔔\' }\n              ].map((feature, index) => (\n                <div key={index} className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6 hover:border-cyan-400/30 transition-all duration-300">\n                  <div className="text-3xl mb-3">{feature.icon}</div>\n                  <h3 className="text-lg font-semibold text-cyan-400 mb-2">{feature.name}</h3>\n                  <p className="text-gray-400 text-sm">{feature.desc}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Quick Copy Section */}\n            <div className="bg-gradient-to-r from-gray-900/50 to-gray-800/50 backdrop-blur-xl border border-gray-700/50 rounded-2xl p-8">\n              <div className="text-center mb-6">\n                <h3 className="text-2xl font-bold text-white mb-2">Quick Start</h3>\n                <p className="text-gray-400">Copy the complete library and start building beautiful UIs</p>\n              </div>\n              \n              <div className="flex justify-center">\n                <button\n                  onClick={copyToClipboard}\n                  className={`group px-8 py-4 bg-gradient-to-r ${\n                    copied \n                      ? \'from-green-500 to-emerald-600\' \n                      : \'from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500\'\n                  } rounded-xl font-semibold text-lg transform hover:scale-105 active:scale-95 transition-all duration-200 shadow-lg hover:shadow-cyan-500/30`}\n                >\n                  <div className="flex items-center space-x-3">\n                    {copied ? (\n                      <>\n                        <Check className="w-6 h-6" />\n                        <span>Copied Complete Library!</span>\n                      </>\n                    ) : (\n                      <>\n                        <Download className="w-6 h-6 group-hover:animate-pulse" />\n                        <span>Copy Full Lua Library</span>\n                      </>\n                    )}\n                  </div>\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* UI Elements Tab */}\n        {activeTab === \'elements\' && (\n          <div className="space-y-8 animate-fade-in">\n            <div className="text-center mb-8">\n              <h2 className="text-3xl font-bold text-white mb-2">UI Elements Preview</h2>\n              <p className="text-gray-400">Visual examples of all available components</p>\n            </div>\n\n            <div className="grid lg:grid-cols-2 gap-8">\n              {/* Button Examples */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4 flex items-center">\n                  <span className="w-8 h-8 bg-cyan-400/20 rounded-lg flex items-center justify-center mr-3 text-sm">🔘</span>\n                  Buttons\n                </h3>\n                <div className="space-y-3">\n                  <div className="h-10 bg-blue-600 rounded-lg flex items-center justify-center text-white font-medium hover:bg-blue-500 transition-colors cursor-pointer">\n                    Primary Button\n                  </div>\n                  <div className="h-10 bg-gray-700 rounded-lg flex items-center justify-center text-white font-medium hover:bg-gray-600 transition-colors cursor-pointer">\n                    Secondary Button\n                  </div>\n                </div>\n                <p className="text-gray-400 text-sm mt-3">Interactive buttons with hover effects and ripple animations</p>\n              </div>\n\n              {/* Toggle Examples */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4 flex items-center">\n                  <span className="w-8 h-8 bg-cyan-400/20 rounded-lg flex items-center justify-center mr-3 text-sm">🔄</span>\n                  Toggles\n                </h3>\n                <div className="space-y-4">\n                  <div className="flex items-center justify-between">\n                    <span className="text-white">Enable Feature</span>\n                    <div className="w-12 h-6 bg-cyan-500 rounded-full relative">\n                      <div className="w-5 h-5 bg-white rounded-full absolute right-0.5 top-0.5"></div>\n                    </div>\n                  </div>\n                  <div className="flex items-center justify-between">\n                    <span className="text-white">Disabled Option</span>\n                    <div className="w-12 h-6 bg-gray-600 rounded-full relative">\n                      <div className="w-5 h-5 bg-white rounded-full absolute left-0.5 top-0.5"></div>\n                    </div>\n                  </div>\n                </div>\n                <p className="text-gray-400 text-sm mt-3">Smooth animated toggle switches with state management</p>\n              </div>\n\n              {/* TextBox Examples */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4 flex items-center">\n                  <span className="w-8 h-8 bg-cyan-400/20 rounded-lg flex items-center justify-center mr-3 text-sm">📝</span>\n                  Text Inputs\n                </h3>\n                <div className="space-y-3">\n                  <div>\n                    <label className="text-white text-sm mb-1 block">Username</label>\n                    <div className="h-10 bg-gray-700 rounded-lg px-3 flex items-center text-gray-300 border border-gray-600">\n                      Enter username...\n                    </div>\n                  </div>\n                  <div>\n                    <label className="text-white text-sm mb-1 block">Password</label>\n                    <div className="h-10 bg-gray-700 rounded-lg px-3 flex items-center text-gray-300 border border-gray-600">\n                      ••••••••\n                    </div>\n                  </div>\n                </div>\n                <p className="text-gray-400 text-sm mt-3">Customizable input fields with validation support</p>\n              </div>\n\n              {/* Dropdown Examples */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4 flex items-center">\n                  <span className="w-8 h-8 bg-cyan-400/20 rounded-lg flex items-center justify-center mr-3 text-sm">📋</span>\n                  Dropdowns\n                </h3>\n                <div className="space-y-3">\n                  <div className="h-10 bg-gray-700 rounded-lg px-3 flex items-center justify-between text-white cursor-pointer hover:bg-gray-600 transition-colors">\n                    <span>Select Option</span>\n                    <span className="text-cyan-400">▼</span>\n                  </div>\n                </div>\n                <p className="text-gray-400 text-sm mt-3">Expandable selection menus with smooth animations</p>\n              </div>\n\n              {/* Slider Examples */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4 flex items-center">\n                  <span className="w-8 h-8 bg-cyan-400/20 rounded-lg flex items-center justify-center mr-3 text-sm">🎚️</span>\n                  Sliders\n                </h3>\n                <div className="space-y-4">\n                  <div>\n                    <div className="flex justify-between text-white text-sm mb-2">\n                      <span>Speed</span>\n                      <span className="text-cyan-400">75</span>\n                    </div>\n                    <div className="h-2 bg-gray-600 rounded-full relative">\n                      <div className="h-2 bg-cyan-500 rounded-full w-3/4"></div>\n                      <div className="w-4 h-4 bg-white rounded-full absolute right-1/4 top-1/2 transform -translate-y-1/2"></div>\n                    </div>\n                  </div>\n                </div>\n                <p className="text-gray-400 text-sm mt-3">Interactive value sliders with smooth dragging</p>\n              </div>\n\n              {/* Notification Examples */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4 flex items-center">\n                  <span className="w-8 h-8 bg-cyan-400/20 rounded-lg flex items-center justify-center mr-3 text-sm">🔔</span>\n                  Notifications\n                </h3>\n                <div className="space-y-3">\n                  <div className="bg-green-500/20 border-l-4 border-green-500 p-3 rounded">\n                    <div className="text-green-400 font-semibold text-sm">Success</div>\n                    <div className="text-gray-300 text-sm">Operation completed successfully</div>\n                  </div>\n                  <div className="bg-red-500/20 border-l-4 border-red-500 p-3 rounded">\n                    <div className="text-red-400 font-semibold text-sm">Error</div>\n                    <div className="text-gray-300 text-sm">Something went wrong</div>\n                  </div>\n                </div>\n                <p className="text-gray-400 text-sm mt-3">Toast notifications with auto-dismiss and animations</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Code Tab */}\n        {activeTab === \'code\' && (\n          <div className="space-y-6 animate-fade-in">\n            <div className="text-center mb-8">\n              <h2 className="text-3xl font-bold text-white mb-2">Complete Lua Library</h2>\n              <p className="text-gray-400">Copy this code to use in your Roblox executor</p>\n            </div>\n\n            <div className="bg-black/70 border border-gray-700/50 rounded-2xl overflow-hidden">\n              {/* Code Header */}\n              <div className="bg-gray-800/50 border-b border-gray-700/50 px-6 py-4 flex items-center justify-between">\n                <div className="flex items-center space-x-3">\n                  <Terminal className="w-5 h-5 text-cyan-400" />\n                  <span className="text-white font-semibold">UILibrary.lua</span>\n                  <span className="px-2 py-1 bg-cyan-500/20 text-cyan-400 text-xs rounded">v2.0</span>\n                </div>\n                <button\n                  onClick={copyToClipboard}\n                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 ${\n                    copied\n                      ? \'bg-green-500/20 text-green-400\'\n                      : \'bg-cyan-500/20 text-cyan-400 hover:bg-cyan-500/30\'\n                  }`}\n                >\n                  {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}\n                  <span>{copied ? \'Copied!\' : \'Copy Code\'}</span>\n                </button>\n              </div>\n\n              {/* Code Content */}\n              <div className="p-6 max-h-96 overflow-y-auto">\n                <pre className="text-sm font-mono text-gray-300 whitespace-pre-wrap">\n                  <code className="language-lua">{luaLibraryCode}</code>\n                </pre>\n              </div>\n            </div>\n\n            {/* Usage Example */}\n            <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n              <h3 className="text-xl font-semibold text-cyan-400 mb-4">Quick Usage Example</h3>\n              <div className="bg-black/50 rounded-lg p-4 font-mono text-sm text-gray-300">\n                <div className="text-green-400">-- Load the library</div>\n                <div className="text-purple-400">local</div> <span className="text-cyan-400">UILibrary</span> = <span className="text-orange-400">loadstring</span>(<span className="text-orange-400">game</span>:<span className="text-green-400">HttpGet</span>(<span className="text-yellow-300">"YOUR_SCRIPT_URL"</span>))()<br/><br/>\n                \n                <div className="text-green-400">-- Create window</div>\n                <div className="text-purple-400">local</div> <span className="text-cyan-400">Window</span> = <span className="text-cyan-400">UILibrary</span>.<span className="text-orange-400">new</span>({`{`}<br/>\n                <span className="ml-4"><span className="text-cyan-400">Title</span> = <span className="text-yellow-300">"My Script Hub"</span></span><br/>\n                {`}`})<br/><br/>\n                \n                <div className="text-green-400">-- Add elements</div>\n                <span className="text-cyan-400">Window</span>:<span className="text-orange-400">CreateButton</span>({`{`}<br/>\n                <span className="ml-4"><span className="text-cyan-400">Text</span> = <span className="text-yellow-300">"Click Me!"</span>,</span><br/>\n                <span className="ml-4"><span className="text-cyan-400">Callback</span> = <span className="text-purple-400">function</span>()</span><br/>\n                <span className="ml-8"><span className="text-orange-400">print</span>(<span className="text-yellow-300">"Hello World!"</span>)</span><br/>\n                <span className="ml-4"><span className="text-purple-400">end</span></span><br/>\n                {`}`})\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Documentation Tab */}\n        {activeTab === \'docs\' && (\n          <div className="space-y-8 animate-fade-in">\n            <div className="text-center mb-8">\n              <h2 className="text-3xl font-bold text-white mb-2">Documentation</h2>\n              <p className="text-gray-400">Complete guide to using the UI Library</p>\n            </div>\n\n            <div className="grid lg:grid-cols-2 gap-8">\n              {/* Getting Started */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4">🚀 Getting Started</h3>\n                <div className="space-y-3 text-gray-300 text-sm">\n                  <p><strong>1.</strong> Copy the complete library code</p>\n                  <p><strong>2.</strong> Host it on a service like GitHub or Pastebin</p>\n                  <p><strong>3.</strong> Load it in your executor using loadstring</p>\n                  <p><strong>4.</strong> Create a window and start adding elements</p>\n                </div>\n              </div>\n\n              {/* API Reference */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4">📚 API Reference</h3>\n                <div className="space-y-2 text-gray-300 text-sm">\n                  <p><code className="bg-black/50 px-2 py-1 rounded">UILibrary.new(options)</code></p>\n                  <p><code className="bg-black/50 px-2 py-1 rounded">:CreateButton(opts)</code></p>\n                  <p><code className="bg-black/50 px-2 py-1 rounded">:CreateToggle(opts)</code></p>\n                  <p><code className="bg-black/50 px-2 py-1 rounded">:CreateTextBox(opts)</code></p>\n                  <p><code className="bg-black/50 px-2 py-1 rounded">:CreateDropdown(opts)</code></p>\n                  <p><code className="bg-black/50 px-2 py-1 rounded">:CreateSlider(opts)</code></p>\n                </div>\n              </div>\n\n              {/* Features */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4">✨ Features</h3>\n                <ul className="space-y-2 text-gray-300 text-sm">\n                  <li>• Modern, clean design</li>\n                  <li>• Smooth animations</li>\n                  <li>• Draggable windows</li>\n                  <li>• Customizable themes</li>\n                  <li>• Responsive layout</li>\n                  <li>• Easy to use API</li>\n                </ul>\n              </div>\n\n              {/* Customization */}\n              <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">\n                <h3 className="text-xl font-semibold text-cyan-400 mb-4">🎨 Customization</h3>\n                <div className="space-y-2 text-gray-300 text-sm">\n                  <p>Customize colors, sizes, and animations by modifying the DefaultTheme table in the library code.</p>\n                  <p className="mt-3"><strong>Available theme properties:</strong></p>\n                  <p><code className="bg-black/50 px-2 py-1 rounded text-xs">MainColor, AccentColor, BackgroundColor, TextColor</code></p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className="relative z-10 border-t border-gray-800/50 mt-16">\n        <div className="container mx-auto px-6 py-6">\n          <div className="text-center text-gray-500 text-sm">\n            <div className="flex items-center justify-center space-x-2 mb-2">\n              <Code className="w-4 h-4" />\n              <span>Roblox UI Library v2.0</span>\n            </div>\n            <p>Created for modern Roblox executors • Complete & Ready to Use</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;']
Observation: Successfully wrote 1 files:
- /app/frontend/src/App.js

supervisorctl status frontend backend (after restart)

frontend                         RUNNING   pid 436, uptime 0:00:04
backend                          RUNNING   pid 462, uptime 0:00:03


🚨 RESOURCE WARNING: CPU 98.6%
Current usage: CPU: 98.6% (0.986/1.00 cores)
